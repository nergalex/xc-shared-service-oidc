# OpenID Connect configuration
#
# Each map block allows multiple values so that multiple IdPs can be supported,
# the $host variable is used as the default input parameter but can be changed.
#
map $http_x_my_idp $oidc_authz_endpoint {
    default "https://login.microsoftonline.com/{{ extra_azure.tenant }}/oauth2/v2.0/authorize";
    azure "https://login.microsoftonline.com/{{ extra_azure.tenant }}/oauth2/v2.0/authorize";
    okta "https://{{ extra_okta.tenant }}.okta.com/oauth2/{{ extra_okta.server_id }}/v1/authorize";
}

map $http_x_my_idp $oidc_authz_extra_args {
    # Extra arguments to include in the request to the IdP's authorization
    # endpoint.
    # Some IdPs provide extended capabilities controlled by extra arguments,
    # for example Keycloak can select an IdP to delegate to via the
    # "kc_idp_hint" argument.
    # Arguments must be expressed as query string parameters and URL-encoded
    # if required.
    default "";
    azure "";
    okta "";
    #www.example.com "kc_idp_hint=another_provider"
}

map $http_x_my_idp $oidc_token_endpoint {
    default "https://login.microsoftonline.com/{{ extra_azure.tenant }}/oauth2/v2.0/token";
    azure "https://login.microsoftonline.com/{{ extra_azure.tenant }}/oauth2/v2.0/token";
    okta "https://{{ extra_okta.tenant }}.okta.com/oauth2/{{ extra_okta.server_id }}/v1/token";
}

map $http_x_my_idp $oidc_jwt_keyfile {
    default "https://login.microsoftonline.com/common/discovery/v2.0/keys";
    azure "https://login.microsoftonline.com/common/discovery/v2.0/keys";
    okta "https://{{ extra_okta.tenant }}.okta.com/oauth2/{{ extra_okta.server_id }}/v1/keys";
}

map $http_x_my_idp $oidc_end_session_endpoint {
    # Specifies the end_session_endpoint URL for RP-initiated logout.
    # If this variable is empty or not set, the default behavior is maintained,
    # which logs out only on the NGINX side.
    default "";
    azure "";
    okta "https://{{ extra_okta.tenant }}.okta.com/oauth2/{{ extra_okta.server_id }}/v1/logout";
}

map $http_x_my_idp $oidc_client {
    default "{{ extra_azure.client_id }}";
    azure "{{ extra_azure.client_id }}";
    okta "{{ extra_okta.client_id }}";
}

map $http_x_my_idp $oidc_pkce_enable {
    default 0;
    azure 0;
    okta 0;
}

map $http_x_my_idp $oidc_client_secret {
    default "{{ extra_azure.client_secret }}";
    azure "{{ extra_azure.client_secret }}";
    okta "{{ extra_okta.client_secret }}";
}

map $http_x_my_idp $oidc_client_auth_method {
    # Choose either "client_secret_basic" for sending client credentials in the
    # Authorization header, or "client_secret_post" for sending them in the
    # body of the POST request. This setting is used for confidential clients.
    default "client_secret_post";
    azure "client_secret_post";
    okta "client_secret_post";
}

map $http_x_my_idp $oidc_scopes {
    default "openid+profile+email+offline_access";
    azure "openid+profile+email+offline_access";
    okta "openid+profile+email+offline_access";
}

map $http_x_my_idp $oidc_logout_redirect {
    # Where to send browser after requesting /logout location. This can be
    # replaced with a custom logout page, or complete URL.
    default "/_logout"; # Built-in, simple logout page
    azure "/_logout"; # Built-in, simple logout page
    okta "/_logout"; # Built-in, simple logout page
}

map $http_x_my_idp $oidc_hmac_key {
    # This should be unique for every NGINX instance/cluster
    default "SharedServiceOIDC";
    azure "SharedServiceOIDC";
    okta "SharedServiceOIDC";
}

map $http_x_my_idp $zone_sync_leeway {
    # Specifies the maximum timeout for synchronizing ID tokens between cluster
    # nodes when you use shared memory zone content sync. This option is only
    # recommended for scenarios where cluster nodes can randomly process
    # requests from user agents and there may be a situation where node "A"
    # successfully received a token, and node "B" receives the next request in
    # less than zone_sync_interval.
    default 0; # Time in milliseconds, e.g. (zone_sync_interval * 2 * 1000)
    azure 0; # Time in milliseconds, e.g. (zone_sync_interval * 2 * 1000)
    okta 0; # Time in milliseconds, e.g. (zone_sync_interval * 2 * 1000)
}

map $proto $oidc_cookie_flags {
    http  "Path=/; SameSite=lax;"; # For HTTP/plaintext testing
    https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
}

map $http_x_forwarded_port $redirect_base {
    ""      $proto://$host:$server_port;
    default $proto://$host:$http_x_forwarded_port;
}

map $http_x_forwarded_proto $proto {
    ""      $scheme;
    default $http_x_forwarded_proto;
}

# ADVANCED CONFIGURATION BELOW THIS LINE
# Additional advanced configuration (server context) in openid_connect.server_conf

# JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
proxy_cache_path /nginx-cache/jwk levels=1 keys_zone=jwk:64k max_size=1m;

# Change timeout values to at least the validity period of each token type
keyval_zone zone=oidc_id_tokens:1M     state=/nginx-state/oidc_id_tokens.json     timeout=1h;
keyval_zone zone=oidc_access_tokens:1M state=/nginx-state/oidc_access_tokens.json timeout=1h;
keyval_zone zone=refresh_tokens:1M     state=/nginx-state/refresh_tokens.json     timeout=8h;
keyval_zone zone=oidc_pkce:128K timeout=90s; # Temporary storage for PKCE code verifier.

keyval $cookie_auth_token $session_jwt   zone=oidc_id_tokens;     # Exchange cookie for JWT
keyval $cookie_auth_token $access_token  zone=oidc_access_tokens; # Exchange cookie for access token
keyval $cookie_auth_token $refresh_token zone=refresh_tokens;     # Exchange cookie for refresh token
keyval $request_id $new_session          zone=oidc_id_tokens;     # For initial session creation
keyval $request_id $new_access_token     zone=oidc_access_tokens;
keyval $request_id $new_refresh          zone=refresh_tokens; # ''
keyval $pkce_id $pkce_code_verifier      zone=oidc_pkce;

auth_jwt_claim_set $jwt_audience aud; # In case aud is an array
js_import oidc from conf.d/openid_connect.js;

# vim: syntax=nginx